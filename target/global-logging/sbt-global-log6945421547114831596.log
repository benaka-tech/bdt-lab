[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Benaka\AppData\Local\Temp\idea7.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Benaka\AppData\Local\Temp\idea7.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (Amazon.com Inc. Java 1.8.0_282)
[debug]       Load.loadUnit: plugins took 153.0684ms
[debug]       Load.loadUnit: defsScala took 0.552ms
[debug] [Loading] Scanning directory C:\Users\Benaka\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Benaka\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 33.5577 ms
[debug]           Load.resolveProject(global-plugins) took 75.2866ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Benaka\.sbt\1.0\plugins, plugins: List(<none>))) took 155.5945ms
[debug] [Loading] Done in C:\Users\Benaka\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 189.5169ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.433ms
[debug]     Load.loadUnit(file:/C:/Users/Benaka/.sbt/1.0/plugins/, ...) took 355.2398ms
[debug]   Load.apply: load took 606.4301ms
[debug]   Load.apply: resolveProjects took 10.0267ms
[debug]   Load.apply: finalTransforms took 94.1476ms
[debug]   Load.apply: config.delegates took 13.0856ms
[debug]   Load.apply: Def.make(settings)... took 2330.7189ms
[debug]   Load.apply: structureIndex took 179.7653ms
[debug]   Load.apply: mkStreams took 2.4581ms
[info] loading global plugins from C:\Users\Benaka\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5653.227ms
[debug]           Load.loadUnit: plugins took 71.1536ms
[debug]           Load.loadUnit: defsScala took 0.0059ms
[debug] [Loading] Scanning directory D:\JAYANTH\ScalaProg\project
[debug]             Load.loadUnit: mkEval took 11.2848ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\JAYANTH\ScalaProg\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.7132 ms
[info] loading settings for project scalaprog-build from idea7.sbt ...
[debug]               Load.resolveProject(scalaprog-build) took 16.1601ms
[debug]             Load.loadTransitive: finalizeProject(Project(id scalaprog-build, base: D:\JAYANTH\ScalaProg\project, plugins: List(<none>))) took 19.6313ms
[debug] [Loading] Done in D:\JAYANTH\ScalaProg\project, returning: (scalaprog-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 238.478ms
[debug]           Load.loadUnit: cleanEvalClasses took 6.0649ms
[debug]         Load.loadUnit(file:/D:/JAYANTH/ScalaProg/project/, ...) took 317.3258ms
[debug]       Load.apply: load took 320.4909ms
[debug]       Load.apply: resolveProjects took 0.1447ms
[debug]       Load.apply: finalTransforms took 14.6948ms
[debug]       Load.apply: config.delegates took 0.5989ms
[debug]       Load.apply: Def.make(settings)... took 153.0195ms
[debug]       Load.apply: structureIndex took 40.362ms
[debug]       Load.apply: mkStreams took 0.0034ms
[info] loading project definition from D:\JAYANTH\ScalaProg\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 957.6284ms
[debug]     Load.loadUnit: defsScala took 0.0047ms
[debug] [Loading] Scanning directory D:\JAYANTH\ScalaProg
[debug]       Load.loadUnit: mkEval took 0.3598ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\JAYANTH\ScalaProg, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 3.0112 ms
[info] loading settings for project scalaprog from build.sbt ...
[debug]         Load.resolveProject(scalaprog) took 44.6691ms
[debug]       Load.loadTransitive: finalizeProject(Project(id scalaprog, base: D:\JAYANTH\ScalaProg, plugins: List(<none>))) took 49.3412ms
[debug] [Loading] Done in D:\JAYANTH\ScalaProg, returning: (scalaprog)
[debug]     Load.loadUnit: loadedProjectsRaw took 3622.9211ms
[debug]     Load.loadUnit: cleanEvalClasses took 8.9224ms
[debug]   Load.loadUnit(file:/D:/JAYANTH/ScalaProg/, ...) took 4590.422ms
[debug] Load.apply: load took 4592.4259ms
[debug] Load.apply: resolveProjects took 0.17ms
[debug] Load.apply: finalTransforms took 35.5079ms
[debug] Load.apply: config.delegates took 0.4787ms
[debug] Load.apply: Def.make(settings)... took 145.3949ms
[debug] Load.apply: structureIndex took 36.9717ms
[debug] Load.apply: mkStreams took 0.0033ms
[info] set current project to Scala Prog (in build file:/D:/JAYANTH/ScalaProg/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 54917 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 54917, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Scala Prog (in build file:/D:/JAYANTH/ScalaProg/)
[debug] > Exec(idea-shell, None, None)
